{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAWC,SAASC,cAAc,SAExCF,EAASG,iBAAiB,SAK1B,SAAoBC,GACnBC,EAAeD,EAAIE,OAAOC,MAAQH,EAAIE,OAAOE,K,IAL9CR,EAASG,iBAAiB,UAQ1B,SAAqBC,G,qBAsBrB,SAAuBK,EAAGC,GAEtB,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACrBC,YAAW,WACWC,KAAKC,SAAW,GAEpCJ,EAAIH,EAAGC,GAEPG,EAAIJ,EAAGC,E,GAENA,E,KAtBHO,CAAcR,EAAGC,GAChBQ,MAAK,WACFC,QAAQC,IAAI,uBAAiCC,OAARZ,EAAE,QAAiBY,OAAXX,EAAW,OACxDY,EAAAxB,GAASyB,OAAOC,QAAQ,uBAAiCH,OAARZ,EAAE,QAAiBY,OAAXX,EAAW,M,IAEvEe,OAAM,WACHN,QAAQC,IAAI,sBAAgCC,OAARZ,EAAE,QAAiBY,OAAXX,EAAW,OACvDY,EAAAxB,GAASyB,OAAOG,QAAQ,sBAA8BL,OAARZ,EAAE,QAAiBY,OAAXX,EAAW,M,KAfzEN,EAAIuB,iBACJvB,EAAIwB,cAAcC,QAKlB,IAJA,IAAMC,EAAQC,OAAO1B,EAAeyB,OAC9BE,EAAOD,OAAO1B,EAAe2B,MAC7BC,EAAWF,OAAO1B,EAAe6B,QAE9BC,EAAI,EAAGC,EAAaN,EAAOK,GAAKF,EAAUE,GAAK,EAAGC,GAAcJ,EAAIK,EAAAF,EAAAC,E,IAdjF,IAAM/B,EAAiB,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formData = document.querySelector(\".form\");\n\nformData.addEventListener(\"input\", inputDate);\nformData.addEventListener(\"submit\", submitForm);\n\nconst inputValueData = {}\n\nfunction inputDate (evt) {\n inputValueData[evt.target.name] = evt.target.value;\n}\n\nfunction submitForm (evt) {\n    \n    evt.preventDefault();\n    evt.currentTarget.reset()\n    const delay = Number(inputValueData.delay);\n    const step = Number(inputValueData.step);\n    const position = Number(inputValueData.amount);\n    \n    for (let i = 1, delayScore = delay; i <= position; i += 1, delayScore += step) {\n\n        createPromise(i, delayScore)\n        .then(() => {\n            console.log(`✅ Fulfilled promise ${i} in ${delayScore}ms`);\n            Notiflix.Notify.success(`✅ Fulfilled promise ${i} in ${delayScore}ms`);\n        })\n        .catch(() => {\n            console.log(`❌ Rejected promise ${i} in ${delayScore}ms`);\n            Notiflix.Notify.failure(`❌ Rejected promise ${i} in ${delayScore}ms`);\n        });\n    }\n}\n\nfunction createPromise(i, delayScore) {\n\n    return new Promise((res, rej) => { \n        setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n        if (shouldResolve) {\n          res(i, delayScore);\n        } else {\n          rej(i, delayScore);\n        }    \n        }, delayScore);\n    });\n}\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formData","document","querySelector","addEventListener","evt","$ce04d3a99e08e73b$var$inputValueData","target","name","value","i","delayScore","Promise","res","rej","setTimeout","Math","random","$ce04d3a99e08e73b$var$createPromise","then","console","log","concat","$parcel$interopDefault","Notify","success","catch","failure","preventDefault","currentTarget","reset","delay","Number","step","position","amount","i1","delayScore1","_loop"],"version":3,"file":"03-promises.499baf36.js.map"}