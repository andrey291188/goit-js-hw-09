{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAWC,SAASC,cAAc,SAExCF,EAASG,iBAAiB,SAK1B,SAAoBC,GACnBC,EAAeD,EAAIE,OAAOC,MAAQH,EAAIE,OAAOE,K,IAL9CR,EAASG,iBAAiB,UAQ1B,SAAqBC,GAEjBA,EAAIK,iBACJL,EAAIM,cAAcC,QAClB,IAAIC,EAAQC,OAAOR,EAAeO,OAClC,MAAME,EAAOD,OAAOR,EAAeS,MAC7BC,EAAWF,OAAOR,EAAeW,QAEvC,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAUE,GAAK,EAEhCC,EAAcD,EAAGL,GAChBO,MAAK,EAACC,EAAEA,EAACC,WAAEA,MACRC,QAAQC,IAAI,uBAAqBH,QAAUC,OAC3CG,EAAA1B,GAAS2B,OAAOC,QAAQ,uBAAqBN,QAAUC,MAAe,IAEzEM,OAAM,EAACP,EAAEA,EAACC,WAAEA,MACTC,QAAQC,IAAI,sBAAoBH,QAAUC,OAC1CG,EAAA1B,GAAS2B,OAAOG,QAAQ,sBAAoBR,QAAQC,MAAe,IAGvET,GAASE,C,IA1BjB,MAAMT,EAAiB,GA8BvB,SAASa,EAAcE,EAAGC,GAEtB,OAAO,IAAIQ,SAAQ,CAACC,EAAKC,KACrBC,YAAW,KACWC,KAAKC,SAAW,GAEpCJ,EAAI,C,EAACV,E,WAAGC,IAERU,EAAI,C,EAACX,E,WAAGC,GAAY,GAEnBA,EAAW,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formData = document.querySelector(\".form\");\n\nformData.addEventListener(\"input\", inputDate);\nformData.addEventListener(\"submit\", submitForm);\n\nconst inputValueData = {}\n\nfunction inputDate (evt) {\n inputValueData[evt.target.name] = evt.target.value;\n}\n\nfunction submitForm (evt) {\n    \n    evt.preventDefault();\n    evt.currentTarget.reset()\n    let delay = Number(inputValueData.delay);\n    const step = Number(inputValueData.step);\n    const position = Number(inputValueData.amount);\n    \n    for (let i = 1; i <= position; i += 1) {\n\n        createPromise(i, delay)\n        .then(({ i, delayScore }) => {\n            console.log(`✅ Fulfilled promise ${i} in ${delayScore}ms`);\n            Notiflix.Notify.success(`✅ Fulfilled promise ${i} in ${delayScore}ms`);\n        })\n        .catch(({ i, delayScore }) => {\n            console.log(`❌ Rejected promise ${i} in ${delayScore}ms`);\n            Notiflix.Notify.failure(`❌ Rejected promise ${i} in ${delayScore}ms`);\n        });\n\n        delay += step;\n    }\n};\n\nfunction createPromise(i, delayScore) {\n\n    return new Promise((res, rej) => { \n        setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n        if (shouldResolve) {\n          res({i, delayScore});\n        } else {\n          rej({i, delayScore});\n        }    \n        }, delayScore);\n    });\n}\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formData","document","querySelector","addEventListener","evt","$47d4ff9957288465$var$inputValueData","target","name","value","preventDefault","currentTarget","reset","delay","Number","step","position","amount","i1","$47d4ff9957288465$var$createPromise","then","i","delayScore","console","log","$parcel$interopDefault","Notify","success","catch","failure","Promise","res","rej","setTimeout","Math","random"],"version":3,"file":"03-promises.d1c59d5e.js.map"}